
debug: false #로그백을 통해서 로그를 찍을수 있도록 자동으로 세팅이 되어있는데, 그 로그백이 디버그 로그를 찍을수 있도록 하는 설정 . 따로 logback.xml 을 편집할 필요 없이 여기서 편집가능. debug : true 를 하면 스프링 부트에서 각종 디버그 로그를 볼수 있음. 그런데 그렇게 되면 너무 많으므로 false로 해주자
management.endpoints.web.exposure.include: "*" #Actuator 의 엔드포인트중에 감춰져 있는 녀석들을 모두 활성화 해주는 설정 : 이렇게 해줘야 개발단계에서 보고싶은 기능들을 모두 볼수 있음


#구체적으로 찍고 싶은 로그 레벨을 명시해줌
logging:
  level:
    com.dev.projectboard: debug # com.dev.projectboard에서  발생하는 모든 로그들은 디버그 레벨로 보겠다는 의미
    org.springframework.web.servlet: debug # request,response 로그 보기 위한 용도. 원래 위에 있는 debug:false 를 debug:true로 해주면 스프링웹 servlet도 true로 되어서 request, response 로그를 볼수 있는데,  스프링웹servlet로그를 보기위해 debug:true를 해준다면 너무 많은 로그를 봐야하므로 debug:false를 해주고 스프링웹servlet을 디버그로 해준다
    org.hibernate.type.descriptor.sql.BasicBinder: trace #jpa 기술을 사용할때 쿼리 로그를 디버그 로그로 관찰 할수 있음. 기본적으로는 jpa 쿼리 로그의 바인딩 파라미터들은 ? 료 나와서 볼수가 없음. 그런데 이렇게 설정해주면 물음표로 나오지않아서 관찰가능. 개발 단계에서는 꼭 필요함

spring:
  datasource:
    url: jdbc:mysql://localhost:3306/board
    username: testuser
    password: testpassword
    driver-class-name: com.mysql.cj.jdbc.Driver #MySQL8버전 부터는 이 드라이버로 해줘야함
  jpa:
#    open-in-view: false
    defer-datasource-initialization: true #테스트용 데이터베이스 데이터를 만들수 있게끔 해줌
    hibernate.ddl-auto: create # 우리가 만든 엔티티클래스들과, jpa 설정들을 기반으로 테이블 데이터를 유추하여 자동으로 ddl쿼리문을 만들어줌
    show-sql: true  #sql문장 을 디버그로 보는 옵션
    properties:     # 추가적인 프로퍼티를 통해서 jpa에 사용할 구현체의 종속된 프로퍼티를 설정할수 있음. 현재 스프링데이터JPA는 기본구현체로 하이버네이트를 사용한다.
                    #jpa구현체는 하이버네이트 말고도 여러가지가 있는데 하이버네이트에서만 전용으로 사용하는 프로퍼티들은 여기서 설정해준다
      hibernate.format_sql: true              #한줄로 나와야하는 디버그 쿼리문을 이쁘게 포맷팅해서 보여줌 : 실무에서 많이 사용함
      hibernate.default_batch_fetch_size: 100 #JPA에서 연관관계가 있는 쿼리를 사용하게 될때 한번에 벌크로 select 해올 수 있도록 해주는 설정
                                              #ex.테이블안에 조인테이브롤 가져와야하는 row수가 10개 정도 된다면 쿼리가 10개까지도 만들어 질수 있는데, 이런것을 해결하는방법중에 하나임
                                              #10개의 쿼리를 아이디인쿼리로 바꿔줘서 1번의 select문으로 바꿀수 있게 도와줌 : 최대 100개 단위로 묶어서 select할수 있음

  sql.init.mode: always #테스트 초기 데이터인 data.sql을 언제 실행 시킬것인가에 대한 옵션
                        #NEVER         /ALWAYS                /EMBEDDED
                        #작동시키지않는다 /리얼 환경에서도 작동시킨다 /임베디드일(테스트환경)때만 작동한다
#  data.rest:
#    base-path: /api
#    detection-strategy: annotated
#  thymeleaf3.decoupled-logic: true

#  security:
#    oauth2:
#      client:
#        registration:
#          kakao:
#            client-id: ${KAKAO_OAUTH_CLIENT_ID}
#            client-secret: ${KAKAO_OAUTH_CLIENT_SECRET}
#            authorization-grant-type: authorization_code
#            redirect-uri: "{baseUrl}/login/oauth2/code/kakao"
#            client-authentication-method: POST
#        provider:
#          kakao:
#            authorization-uri: https://kauth.kakao.com/oauth/authorize
#            token-uri: https://kauth.kakao.com/oauth/token
#            user-info-uri: https://kapi.kakao.com/v2/user/me
#            user-name-attribute: id
  h2:
    console:
      enabled: false

#yaml 파일은 --- 이것을 기준으로 여러개의 문서를 만들 수 있음음
#여기까지가 기본 도큐먼트
---
#새로운 도큐먼트시작

#spring:
#  config.activate.on-profile: heroku
#  datasource:
#    url: ${JAWSDB_URL}
#    driver-class-name: com.mysql.cj.jdbc.Driver
#  jpa.hibernate.ddl-auto: create
#  sql.init.mode: always

---
#테스트db용 문서파일
spring:
  config.activate.on-profile: testdb
#  datasource:
#  url: jdbc:h2:mem:board;mode=mysql
#  driverClassName : org.h2.Driver
#  sql.init.mode: always
#  test.database.replace: none